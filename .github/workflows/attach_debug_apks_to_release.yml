name: build Debug APKs To Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package_variant: [apt-android-7]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Clone repository and submodules
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Initialize/Update Submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Build
        shell: bash
        env:
          PACKAGE_VARIANT: ${{ matrix.package_variant }}
        run: |
          CURRENT_VERSION_NAME_REGEX='\s+versionName "([^"]+)"$'
          CURRENT_VERSION_NAME=$(grep -m 1 -E "$CURRENT_VERSION_NAME_REGEX" ./app/build.gradle | sed -r "s/$CURRENT_VERSION_NAME_REGEX/\1/")
          RELEASE_VERSION_NAME="v${CURRENT_VERSION_NAME}+${GITHUB_SHA:0:7}"
          APK_VERSION_TAG="${RELEASE_VERSION_NAME}+${{ matrix.package_variant }}-github-debug"

          echo "RELEASE_VERSION_NAME=$RELEASE_VERSION_NAME" >> $GITHUB_ENV
          echo "APK_VERSION_TAG=$APK_VERSION_TAG" >> $GITHUB_ENV
          
          echo "Building APKs for ${APK_VERSION_TAG} release"
          ./gradlew assembleDebug

          echo "Found XoDos APKs:"
          ls -la ./app/build/outputs/apk/debug/*.apk
          if ls ./app/build/outputs/apk/debug/*universal.apk 1> /dev/null 2>&1; then
            echo "Universal APK found"
          else
            echo "::error::Universal APK not found!"
            #exit 1
          fi

      - name: Upload APKs to GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: apks-${{ matrix.package_variant }}
          path: ./app/build/outputs/apk/debug/*.apk

  upload:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get release version
        id: get_version
        run: |
          CURRENT_VERSION_NAME=$(grep -m1 'versionName' ./app/build.gradle | awk '{print $2}' | tr -d '"')
          RELEASE_VERSION_NAME="v${CURRENT_VERSION_NAME}+${GITHUB_SHA:0:7}"
          echo "release_version=$RELEASE_VERSION_NAME" >> $GITHUB_OUTPUT
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify artifacts exist
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name '*.apk' -print
          
          APK_COUNT=$(find artifacts -type f -name '*.apk' | wc -l)
          if [ "$APK_COUNT" -eq 0 ]; then
            echo "::error::No APK files found in artifacts!"
            #exit 1
          fi
          echo "Found $APK_COUNT APK files"

      - name: Create Release and Upload APKs
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.release_version }}
          name: Release ${{ steps.get_version.outputs.release_version }}
          files: |
            artifacts/**/*.apk
          generate_release_notes: true
          draft: false
          prerelease: true
          fail_on_unmatched_files: false
